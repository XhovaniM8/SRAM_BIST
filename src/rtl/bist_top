// Top-Level BIST Module
module bist_top #(
    parameter size = 6,
    parameter length = 8
) (
    input logic start,
    input logic rst,
    input logic clk,
    input logic csin,
    input logic rwbarin,
    input logic [size-1:0] address,
    input logic [length-1:0] datain,
    output logic [length-1:0] dataout,
    output logic fail
);
    // Internal signals
    logic cout, ld, NbarT, cs, rwbar, eq;
    logic [9:0] q;
    logic [7:0] data_t;
    logic [length-1:0] ramin, ramout;
    logic [size-1:0] ramaddr;

    // Initialize test result
    always @(posedge clk or posedge rst) begin
        if (rst)
            fail <= 1'b0;
        else if (NbarT && rwbar && ~eq)
            fail <= 1'b1;
        else
            fail <= 1'b0;
    end

    // Instantiate submodules
    bist_controller CNTRL (
        .start(start),
        .rst(rst),
        .clk(clk),
        .cout(cout),
        .NbarT(NbarT),
        .ld(ld)
    );

    bist_counter CNT (
        .d_in(10'b0),
        .clk(clk),
        .ld(ld),
        .u_d(1'b1),
        .cen(1'b1),
        .q(q),
        .cout(cout)
    );

    bist_decoder DEC (
        .in(q[9:7]),
        .out(data_t)
    );

    muxd MUX_D (
        .i0(datain),
        .i1(data_t),
        .s(NbarT),
        .y(ramin)
    );

    muxa MUX_A (
        .i0(address),
        .i1(q[5:0]),
        .s(NbarT),
        .y(ramaddr)
    );

    bist_ram MEM (
        .data(ramin),
        .addr(ramaddr),
        .re(rwbar),
        .clk(clk),
        .q(ramout)
    );

    bist_comparator CMP (
        .a(data_t),
        .b(ramout),
        .a_gt_b(),
        .a_eq_b(eq),
        .a_lt_b()
    );

    assign rwbar = (!NbarT) ? rwbarin : q[6];
    assign cs = (!NbarT) ? csin : 1'b1;
    assign dataout = ramout;
endmodule

// BIST Controller Module
module bist_controller (
    input logic start,
    input logic rst,
    input logic clk,
    input logic cout,
    output logic NbarT,
    output logic ld
);

    // Define states
    parameter RESET = 1'b0, TEST = 1'b1;

    reg current_state;

    always @(posedge clk or posedge rst) begin
        if (rst)
            current_state <= RESET;
        else begin
            case (current_state)
                RESET: if (start)
                           current_state <= TEST;
                       else
                           current_state <= RESET;
                TEST: if (cout)
                          current_state <= RESET;
                      else
                          current_state <= TEST;
                default: current_state <= RESET;
            endcase
        end
    end

    assign NbarT = (current_state == TEST) ? 1'b1 : 1'b0;
    assign ld = (current_state == RESET) ? 1'b1 : 1'b0;
endmodule

// Counter Module
module bist_counter #(
    parameter length = 10
) (
    input logic [length-1:0] d_in,
    input logic clk,
    input logic ld,
    input logic u_d,
    input logic cen,
    output logic [length-1:0] q,
    output logic cout
);
    logic [length:0] cnt_reg;

    always @(posedge clk) begin
        if (cen) begin
            if (ld)
                cnt_reg <= {1'b0, d_in};
            else if (u_d)
                cnt_reg <= cnt_reg + 1;
            else
                cnt_reg <= cnt_reg - 1;
        end
    end

    assign q = cnt_reg[length-1:0];
    assign cout = cnt_reg[length];
endmodule

// Comparator Module
module bist_comparator (
    input logic [7:0] a,
    input logic [7:0] b,
    output logic a_gt_b,
    output logic a_eq_b,
    output logic a_lt_b
);
    always_comb begin
        a_gt_b = (a > b);
        a_eq_b = (a == b);
        a_lt_b = (a < b);
    end
endmodule

// Address Multiplexer (6-bit)
module muxa (
    input logic [5:0] i0,
    input logic [5:0] i1,
    input logic s,
    output logic [5:0] y
);
    assign y = s ? i1 : i0;
endmodule

// Data Multiplexer (8-bit)
module muxd (
    input logic [7:0] i0,
    input logic [7:0] i1,
    input logic s,
    output logic [7:0] y
);
    assign y = s ? i1 : i0;
endmodule

// 64 x 8-bit Single-Port SRAM
module bist_ram (
    input logic [7:0] data,
    input logic [5:0] addr,
    input logic re,
    input logic clk,
    output logic [7:0] q
);
    reg [7:0] ram [63:0];
    reg [5:0] addr_reg;

    always @(posedge clk) begin
        if (!re)
            ram[addr] <= data;
        addr_reg <= addr;
    end

    assign q = ram[addr_reg];
endmodule
